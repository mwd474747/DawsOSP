name: Trinity Compliance Check

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'dawsos/**/*.py'
      - 'patterns/**/*.json'
      - 'scripts/check_compliance.py'
      - '.github/workflows/compliance-check.yml'
  push:
    branches: [ main, develop ]
    paths:
      - 'dawsos/**/*.py'
      - 'patterns/**/*.json'

  # Allow manual trigger
  workflow_dispatch:

jobs:
  compliance-check:
    name: Trinity Architecture Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install test dependencies
          pip install pytest pytest-cov

      - name: Run Trinity Compliance Checker
        id: compliance
        run: |
          python3 scripts/check_compliance.py --format github --strict
        continue-on-error: true

      - name: Run Trinity Compliance Checker (JSON report)
        id: compliance-json
        run: |
          python3 scripts/check_compliance.py --format json > compliance-report.json
          cat compliance-report.json
        continue-on-error: true

      - name: Upload compliance report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: compliance-report.json
          retention-days: 30

      - name: Comment PR with compliance report
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('compliance-report.json', 'utf8'));

            let comment = '## 🚨 Trinity Compliance Violations Found\n\n';
            comment += `**Files checked:** ${report.files_checked}\n`;
            comment += `**Total violations:** ${report.total_violations}\n\n`;

            if (report.violations.length > 0) {
              comment += '### Violations by File\n\n';

              // Group by file
              const byFile = {};
              report.violations.forEach(v => {
                if (!byFile[v.file_path]) byFile[v.file_path] = [];
                byFile[v.file_path].push(v);
              });

              for (const [file, violations] of Object.entries(byFile)) {
                comment += `#### \`${file}\`\n\n`;
                violations.forEach(v => {
                  comment += `- **Line ${v.line_number}:** ${v.violation_type}\n`;
                  comment += `  \`\`\`python\n  ${v.code_snippet}\n  \`\`\`\n`;
                  comment += `  💡 **Fix:** \`${v.suggested_fix}\`\n\n`;
                });
              }
            }

            comment += '\n---\n';
            comment += '📚 **Resources:**\n';
            comment += '- [Trinity Architecture Guide](../docs/TRINITY_ARCHITECTURE.md)\n';
            comment += '- Use `runtime.exec_via_registry(agent_name, context)` instead of direct access\n';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fail if violations found
        if: steps.compliance.outcome == 'failure'
        run: |
          echo "❌ Trinity compliance violations detected!"
          echo "Review the compliance report for details."
          exit 1

  pattern-lint:
    name: Pattern Configuration Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Validate pattern configurations
        run: |
          # Check if pattern linter exists
          if [ -f scripts/lint_patterns.py ]; then
            python3 scripts/lint_patterns.py
          else
            echo "Pattern linter not found, skipping..."
          fi

      - name: Validate JSON syntax
        run: |
          # Check all pattern JSON files
          find patterns -name "*.json" -type f | while read file; do
            echo "Checking $file..."
            python3 -m json.tool "$file" > /dev/null || exit 1
          done

  test-suite:
    name: Run Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov pytest-timeout

      - name: Run system health tests
        run: |
          if [ -f dawsos/test_system_health.py ]; then
            python3 -m pytest dawsos/test_system_health.py -v --tb=short --timeout=30
          fi

      - name: Run integration tests
        run: |
          if [ -d dawsos/tests/validation ]; then
            python3 -m pytest dawsos/tests/validation/ -v --tb=short --timeout=60
          fi
        continue-on-error: true

      - name: Run unit tests with coverage
        run: |
          if [ -d dawsos/tests ]; then
            python3 -m pytest dawsos/tests/ --cov=dawsos/core --cov-report=xml --cov-report=term
          fi
        continue-on-error: true

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: false

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r dawsos/ -f json -o bandit-report.json || true
          bandit -r dawsos/ -ll

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: bandit-report.json
          retention-days: 30

  compliance-report:
    name: Generate Compliance Summary
    runs-on: ubuntu-latest
    needs: [compliance-check, pattern-lint, test-suite]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download compliance artifacts
        uses: actions/download-artifact@v4
        with:
          name: compliance-report
        continue-on-error: true

      - name: Generate summary
        run: |
          echo "## 📊 Trinity Compliance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f compliance-report.json ]; then
            FILES=$(jq -r '.files_checked' compliance-report.json)
            VIOLATIONS=$(jq -r '.total_violations' compliance-report.json)

            echo "- **Files Checked:** $FILES" >> $GITHUB_STEP_SUMMARY
            echo "- **Violations Found:** $VIOLATIONS" >> $GITHUB_STEP_SUMMARY

            if [ "$VIOLATIONS" -eq 0 ]; then
              echo "- **Status:** ✅ All checks passed!" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Status:** ❌ Violations detected" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Status:** ⚠️ Report not available" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Jobs Status" >> $GITHUB_STEP_SUMMARY
          echo "- Compliance Check: ${{ needs.compliance-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Pattern Lint: ${{ needs.pattern-lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test Suite: ${{ needs.test-suite.result }}" >> $GITHUB_STEP_SUMMARY
