# DawsOS Environment Configuration Template
# Purpose: API keys and configuration for external data providers
# Updated: 2025-10-23
# Security: NEVER commit actual API keys to git - use this template only

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================
# Use application role (non-superuser) for RLS enforcement
DATABASE_URL=postgresql://dawsos_app:dawsos_app_pass@localhost:5432/dawsos

# Admin role for migrations only (DO NOT use in application code)
DATABASE_URL_ADMIN=postgresql://dawsos:dawsos@localhost:5432/dawsos

# ============================================================================
# EXTERNAL DATA PROVIDER API KEYS
# ============================================================================
# These are OPTIONAL - system will work in stub mode without them
# Get free/trial keys from provider websites to enable real data fetching

# Financial Modeling Prep (FMP) - Fundamentals
# Get your key: https://site.financialmodelingprep.com/developer/docs
# Free tier: 250 requests/day, Premium: Unlimited
# Required for: Income statements, balance sheets, financial ratios
FMP_API_KEY=

# Polygon.io - Market Data
# Get your key: https://polygon.io/dashboard/api-keys
# Starter plan: $200/month, includes historical data
# Required for: Daily prices, splits, dividends, FX rates
POLYGON_API_KEY=

# FRED (Federal Reserve Economic Data)
# Get your key: https://fred.stlouisfed.org/docs/api/api_key.html
# Free tier: 120 requests/minute
# Required for: Macro indicators (T10Y2Y, UNRATE, CPIAUCSL, etc.)
FRED_API_KEY=

# NewsAPI - News Headlines
# Get your key: https://newsapi.org/register
# Developer plan: Free (100 requests/day, 24h delay)
# Required for: Portfolio-weighted news (future feature)
NEWSAPI_KEY=

# Anthropic Claude API (AI Analysis)
# Get your key: https://console.anthropic.com/settings/keys
# Pay-as-you-go: ~$0.003/request
# Required for: AI-powered explanations and analysis
ANTHROPIC_API_KEY=

# ============================================================================
# PROVIDER RATE LIMITS
# ============================================================================
# Override default rate limits (requests per minute)
# Only change if you have upgraded plan with higher limits

FMP_RATE_LIMIT=120          # Default: 120 req/min (Premium plan)
POLYGON_RATE_LIMIT=100      # Default: 100 req/min (Starter plan)
FRED_RATE_LIMIT=60          # Default: 60 req/min (Free tier)
NEWSAPI_RATE_LIMIT=100      # Default: 100 req/day (Developer plan)

# ============================================================================
# CIRCUIT BREAKER CONFIGURATION
# ============================================================================
# Circuit breaker settings for provider resilience
# Breaker opens after N consecutive failures, stays open for timeout seconds

CIRCUIT_BREAKER_THRESHOLD=3     # Open after 3 failures
CIRCUIT_BREAKER_TIMEOUT=60      # Stay open for 60 seconds

# ============================================================================
# REDIS CACHE
# ============================================================================
# Redis connection for caching and rate limiting

REDIS_URL=redis://localhost:6379/0

# ============================================================================
# EXECUTOR API CONFIGURATION
# ============================================================================
# FastAPI Executor API settings

EXECUTOR_API_URL=http://localhost:8000
EXECUTOR_API_PORT=8000

# CORS origins (comma-separated list)
# Add your frontend URL here if different from localhost
CORS_ORIGINS=http://localhost:8501,http://127.0.0.1:8501

# ============================================================================
# OBSERVABILITY (OPTIONAL)
# ============================================================================
# OpenTelemetry tracing (optional - leave empty to disable)
# Set this to your OTLP collector endpoint (e.g., Jaeger, Honeycomb)

OTLP_ENDPOINT=

# Sentry error tracking (optional - leave empty to disable)
# Get your DSN: https://sentry.io/settings/projects/

SENTRY_DSN=

# ============================================================================
# APPLICATION ENVIRONMENT
# ============================================================================
# Environment: development, staging, production

ENVIRONMENT=development

# Log level: DEBUG, INFO, WARNING, ERROR
LOG_LEVEL=INFO

# ============================================================================
# SECURITY NOTES
# ============================================================================
# 1. NEVER commit this file with actual API keys to git
# 2. Copy this template to .env and fill in your keys:
#    cp .env.example .env
# 3. Ensure .env is in .gitignore (it should be by default)
# 4. For production, use secrets manager (AWS Secrets Manager, Vault)
# 5. Rotate API keys quarterly
# 6. Monitor API usage to detect leaks (FMP bandwidth alarms)

# ============================================================================
# GETTING STARTED
# ============================================================================
# Minimum required for basic functionality:
#   - DATABASE_URL (for database access)
#   - REDIS_URL (for caching)
#
# Optional for real data (system works in stub mode without):
#   - FMP_API_KEY (for fundamentals)
#   - POLYGON_API_KEY (for prices)
#   - FRED_API_KEY (for macro indicators)
#
# Free tier recommendations:
#   - Start with FRED (free, no credit card)
#   - Add FMP free tier (250 req/day, good for testing)
#   - Upgrade to Polygon Starter when ready for production

# ============================================================================
# VERIFICATION
# ============================================================================
# After setting up .env, verify configuration:
#
# 1. Check if API keys are loaded:
#    source .env
#    echo $FMP_API_KEY
#
# 2. Test provider connections:
#    python -c "from backend.app.providers.fmp_client import FMPClient; print(FMPClient().api_key)"
#
# 3. Run integration tests:
#    ./test_integration.sh
