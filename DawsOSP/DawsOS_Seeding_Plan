# DawsOS — **Master Seeding Plan **

**Scope:** Database Seeds + Pattern Seeds (incl. Dalio Cycles) • **Date:** 2025-10-21 • **Owner:** Mike

> One cohesive plan to seed everything the platform needs for deterministic, auditable runs from day one: **truth spine** (ledger + packs), **macro**, **cycles**, **ratings**, **optimizer**, **news**, **rights**, **symbol master**, **demo portfolio**. Includes file layout, content examples, load order, idempotency, and validation.

---

## 0) Seeding Goals & Invariants

**Goals**

* Patterns run **deterministically** on day one.
* Numbers **reproduce**: every result references `pricing_pack_id` + `ledger_commit_hash`.
* **Multi-currency truth**: trade-time FX (lots), pack FX (valuation), pay-date FX (dividends/ADRs).
* **Compliance**: rights registry enforced on all exports.

**Invariants**

* Pack rows immutable; restatements via `superseded_by`.
* RLS enabled; seeds load under **admin** connection; app uses `app.user_id`.
* All seed JSON has `schema_version` and method `version`.

---

## 1) Directory Layout & Make Targets

```
data/SEEDS/
  portfolios/        # tenants, portfolios, lots, txns, benchmarks
  symbols/           # securities, figi/cusip mappings, sectors
  fx/                # WM 4pm daily FX snapshots
  prices/            # split-adjusted closes by pack
  packs/             # pricing_pack rows, pack_supersedes
  ca/                # corporate actions: splits, dividends meta
  fundamentals/      # optional: cached profile/statements (FMP)
  macro/             # FRED catalog, transforms, regime defs, presets
  macro_cycles/      # definitions & snapshots (STDC/LTDC/Empire)
  ratings/           # rubrics & component thresholds
  optimizer/         # policy templates & constraints
  news/              # entity dict, lexicon, source lists, impact rules
  knowledge/         # initial KG nodes/edges (optional)
  rights/            # RIGHTS_REGISTRY.yaml
  calendars/         # business/exchange calendars, holidays
scripts/
  seed_load.py
  seed_generate_demo_pack.py
  seed_ingest_demo_portfolio.py
Makefile
```

**Make targets**

* `make seed:foundation` → symbols, portfolios, benchmarks, FX, prices, packs, CA, calendars, rights
* `make seed:demo` → demo lots/transactions (ADR case), Beancount, reconciliation
* `make seed:macro` → FRED catalog, transforms, regime defs
* `make seed:cycles` → cycle definitions & snapshots (STDC/LTDC/Empire)
* `make seed:ratings` → rating schema & rubrics
* `make seed:optimizer` → policy templates & constraints
* `make seed:news` → entities, lexicon, sources, impact rules
* `make validate` → property/golden/integration checks

---

## 2) Load Order & Idempotency

**Order (sacred)**

1. **Symbols/securities** → FIGI/CUSIP mapping → sectors
2. **Benchmarks** (hedged/unhedged)
3. **Calendars** (business/exchange/holidays)
4. **FX** (D0, D1 WM 16:00)
5. **Prices** (D0, D1 split-adjusted closes)
6. **Packs** (D0, D1) + `pack_supersedes` (D0→D1 if late CA)
7. **Corporate actions** (splits & dividends meta)
8. **Portfolios** → **Lots** (trade-time FX lock) → **Transactions** (incl. dividends with **pay-date FX**)
9. **Macro** (FRED catalog, transforms, regime defs)
10. **Cycles** (cycle defs & snapshots)
11. **Ratings** (schema & rubrics)
12. **Optimizer** (policy templates & constraints)
13. **News** (entities, lexicon, source lists, impact rules)
14. **Rights registry** (YAML)

**Idempotency**

* Seed loaders **UPSERT** on natural keys:

  * `securities(symbol, exchange)`
  * `symbol_mapping(symbol, exchange)`
  * `benchmarks(code)`
  * `fx_rates(base_ccy, quote_ccy, asof_ts, pricing_pack_id)`
  * `prices(security_id, asof_date, pricing_pack_id)`
  * `pricing_pack(id)`
  * `lots` key `(portfolio_id, security_id, trade_date, cost_ccy, cost_per_unit_ccy, qty_open)`
  * `transactions(id)`
  * `macro_regime_snapshots(asof_date)`; `cycle_phase_snapshots(asof_date, cycle_id, method_version)`
  * `ratings(portfolio_id, security_id, rating_type, asof_date)`
  * `alerts(id)`, `notifications` dedupe index

---

## 3) Seed Content (by domain) w/ Examples

### 3.1 Identity & Reference

**`symbols/securities.csv`**

```csv
id,symbol,exchange,name,trading_currency,dividend_currency,domicile_country,type,figi,cusip
SEC_AAPL,AAPL,NASDAQ,Apple Inc.,USD,USD,US,equity,BBG000B9XRY4,037833100
SEC_RY,RY,TSX,Royal Bank of Canada,CAD,CAD,CA,equity,BBG000BF46Y8,780087102
SEC_XIU,XIU,TSX,iShares S&P/TSX 60 ETF,CAD,CAD,CA,etf,BBG000B9Y8M5,464286509
```

**`symbols/symbol_mapping.csv`**

```csv
symbol,exchange,figi,cusip,security_id,source
AAPL,NASDAQ,BBG000B9XRY4,037833100,SEC_AAPL,override
RY,TSX,BBG000BLNNH6,780087102,SEC_RY,override
```

**`portfolios/benchmarks.csv`**

```csv
id,code,name,currency,hedged_flag
BMK_TSX_UNHEDGED,SPTSX,"S&P/TSX Composite (Unhedged)",CAD,false
BMK_ACWI_USD,ACWI,MSCI ACWI,USD,false
BMK_ACWI_CADH,ACWI_CADH,MSCI ACWI (CAD hedged),CAD,true
```

**Calendars**

* `calendars/business_calendars.csv` → region, TZ, weekend rules
* `calendars/exchange_calendars.csv` → open/close times, holidays
* `calendars/holidays.csv` → dates per region/exchange

---

### 3.2 FX, Prices, Packs, Corporate Actions

**`fx/fx_rates_D1.csv`**

```csv
asof_ts,base_ccy,quote_ccy,rate,source,policy,pricing_pack_id
2025-10-21T21:00:00Z,USD,CAD,1.3400,WM_REUTERS,WM4PM,PP_2025-10-21
2025-10-21T21:00:00Z,EUR,CAD,1.4600,WM_REUTERS,WM4PM,PP_2025-10-21
```

**`prices/prices_D1.csv`**

```csv
security_id,asof_date,close,currency,source,pricing_pack_id
SEC_AAPL,2025-10-21,232.50,USD,Polygon,PP_2025-10-21
SEC_RY,2025-10-21,128.20,CAD,Polygon,PP_2025-10-21
SEC_XIU,2025-10-21,31.90,CAD,Polygon,PP_2025-10-21
```

**`packs/pricing_pack_D1.csv`**

```csv
id,date,policy,sources_json,hash,created_at
PP_2025-10-21,2025-10-21,WM4PM_CAD,"{""prices"":""Polygon"",""fx"":""WM_REUTERS""}","sha256:...",2025-10-21T00:10:00Z
```

**Restatement** — `packs/pack_supersedes.csv`

```csv
prior_pack_id,new_pack_id,reason,created_at
PP_2025-10-15,PP_2025-10-21,"AAPL 2:1 split backfilled",2025-10-21T00:12:00Z
```

**Corporate Actions**

* `ca/splits.csv` → ensures prior pack supersede path
* `ca/dividends.csv` → ex/record/pay, frequency, amount (currency)

---

### 3.3 Portfolios, Lots, Transactions (ADR & FX)

**`portfolios/portfolios.csv`**

```csv
id,name,user_id,base_ccy,benchmark_id,settings_json
P1,"Core Balanced","U1","CAD","BMK_TSX_UNHEDGED","{""hedge_ratio"":0.0}"
```

**`portfolios/lots.csv`**

```csv
id,portfolio_id,security_id,qty_open,trade_ccy,trade_fx_rate_id,cost_ccy,cost_per_unit_ccy,cost_base,trade_date
LOT_AAPL_P1,P1,SEC_AAPL,300,USD,FX_2024-07-15_USDCAD,USD,175.00,69562.50,2024-07-15
LOT_RY_P1,P1,SEC_RY,400,CAD,,CAD,120.50,48200.00,2024-08-02
LOT_XIU_P1,P1,SEC_XIU,1000,CAD,,CAD,32.10,32100.00,2024-03-18
```

**`portfolios/transactions.csv`**

```csv
id,portfolio_id,security_id,type,qty,price_ccy,price_base,trade_ccy,trade_fx_rate_id,gross_ccy,gross_base,withholding_ccy,withholding_base,net_ccy,net_base,pay_date,pay_fx_rate_id,txn_ts
TXN_AAPL_BUY,P1,SEC_AAPL,buy,300,175.00,231.88,USD,FX_2024-07-15_USDCAD,,,,,,2024-07-15,FX_2024-07-15_USDCAD,2024-07-15T17:00:00Z
TXN_AAPL_DIV1,P1,SEC_AAPL,dividend,,,,USD,,1200.00,1632.00,180.00,244.80,1020.00,1387.20,2024-10-20,FX_2024-10-20_USDCAD,2024-10-20T20:00:00Z
```

---

### 3.4 Macro (FRED) & Scenarios

**`macro/fred_series_catalog.json`**

```json
{
  "schema_version":"1.0",
  "series": {
    "T10Y2Y":   {"desc":"10Y-2Y Treasury spread","transform":"raw"},
    "UNRATE":   {"desc":"Unemployment rate","transform":"yoy_change"},
    "CPIAUCSL": {"desc":"CPI (All Urban Consumers)","transform":"yoy_change"},
    "BAA10Y":   {"desc":"Baa - 10Y Treasury spread","transform":"raw"}
  }
}
```

**`macro/transform_pipelines.json`**

```json
{"zscore_window_days": 365, "fill_method":"ffill", "resample":"D"}
```

**`macro/regime_definition.json`**

```json
{
  "schema_version":"1.0",
  "regimes":[
    {"name":"Late-cycle","rules":{"T10Y2Y":"<0","UNRATE":"up","CPIAUCSL":"down"},"weight":0.4},
    {"name":"Disinflation","rules":{"CPIAUCSL":"down"},"weight":0.3},
    {"name":"Stagnation","rules":{"UNRATE":"up","CPIAUCSL":"down"},"weight":0.3}
  ]
}
```

**`macro/scenario_presets.json`**

```json
[
  {"id":"late_cycle_rates_up","label":"Rates +50bp; growth cools","shocks":{"rates_bps":50,"cpi_surprise_pct":0.004,"usd_vs_cad_pct":0.05}},
  {"id":"inflation_reaccel","label":"CPI +1.0% YoY","shocks":{"cpi_surprise_pct":0.01}},
  {"id":"usd_rally","label":"USD +5%","shocks":{"usd_vs_cad_pct":0.05}}
]
```

---

### 3.5 **Dalio Cycles** (Short-Term Debt, Long-Term Debt, Empire)

**`macro_cycles/macro_cycle_definitions.json`**

```json
{
  "schema_version":"1.0",
  "cycles":[
    {
      "id":"short_term_debt",
      "method_version":"stdc_v1",
      "indicators":[
        {"id":"T10Y2Y","weight":0.35,"transform":"zscore"},
        {"id":"UNRATE","weight":0.25,"transform":"zscore"},
        {"id":"CPIAUCSL","weight":0.25,"transform":"zscore"},
        {"id":"BAA10Y","weight":0.15,"transform":"zscore"}
      ],
      "phases":[
        {"label":"Expansion","rules":{"T10Y2Y":">0","UNRATE":"down","CPIAUCSL":"up"}},
        {"label":"Late","rules":{"T10Y2Y":"<=0"}},
        {"label":"Deleveraging","rules":{"UNRATE":"up","CPIAUCSL":"down"}},
        {"label":"Recovery","rules":{"UNRATE":"down","CPIAUCSL":"flat"}}
      ],
      "zscore_window_days":365
    },
    {
      "id":"long_term_debt",
      "method_version":"ltdc_v1",
      "indicators":[
        {"id":"DEBT_GDP","weight":0.4,"transform":"zscore"},
        {"id":"REAL_POLICY_RATE","weight":0.3,"transform":"zscore"},
        {"id":"CREDIT_IMPULSE","weight":0.3,"transform":"zscore"}
      ],
      "phases":[
        {"label":"Leveraging","rules":{"DEBT_GDP":"up"}},
        {"label":"HighLeverage","rules":{"REAL_POLICY_RATE":"<=0"}},
        {"label":"Deleveraging","rules":{"CREDIT_IMPULSE":"down","DEBT_GDP":"flat/down"}},
        {"label":"Normalization","rules":{"REAL_POLICY_RATE":">0"}}
      ],
      "zscore_window_days":3650
    },
    {
      "id":"empire",
      "method_version":"empire_v1",
      "indicators":[
        {"id":"RESERVE_SHARE","weight":0.3},
        {"id":"WORLD_GDP_SHARE","weight":0.25},
        {"id":"FIN_CENTER_INDEX","weight":0.2},
        {"id":"MILITARY_POWER","weight":0.15},
        {"id":"INTERNAL_ORDER","weight":0.05},
        {"id":"INNOVATION_RATE","weight":0.05}
      ],
      "phases":[
        {"label":"Rise"}, {"label":"Peak"}, {"label":"Stagnation"}, {"label":"Decline"}, {"label":"Transition"}
      ]
    }
  ]
}
```

**`macro_cycles/cycle_phase_snapshots.csv`**
Seed STDC (daily/weekly), LTDC (monthly), Empire (quarterly/annual) for the last 12–24 months:

```csv
asof_date,cycle_id,phase_label,phase_score,drivers_json,confidence,method_version
2025-10-21,short_term_debt,Late,0.71,"{""T10Y2Y"":-1.2,""UNRATE"":0.5,""CPIAUCSL"":-0.3,""BAA10Y"":0.4}",0.78,"stdc_v1"
2025-10-01,long_term_debt,HighLeverage,0.66,"{""DEBT_GDP"":1.3,""REAL_POLICY_RATE"":-1.1,""CREDIT_IMPULSE"":-0.2}",0.72,"ltdc_v1"
2025-07-01,empire,Decline,0.58,"{""RESERVE_SHARE"":-0.8,""WORLD_GDP_SHARE"":-0.6}",0.60,"empire_v1"
```

**`macro_cycles/empire_indicators.csv`** (curated, slow-moving)

```csv
asof_date,reserve_share,share_world_gdp,financial_center,military_power,internal_order,innovation_rate,composite_index
2025-07-01,0.57,0.23,0.82,0.76,0.69,0.73,0.70
```

---

### 3.6 Ratings & Optimizer

**`ratings/rating_schema.json`**

```json
{"schema_version":"1.0","factors":{"dividend_safety":{"min":0,"max":10},"moat_strength":{"min":0,"max":10},"resilience":{"min":0,"max":10}}}
```

**`ratings/dividend_safety_v1.json`** *(per earlier example)*
**`ratings/moat_strength_v1.json`**, **`ratings/resilience_v1.json`**
**`optimizer/policy_templates.json`**, **`optimizer/constraint_defaults.json`**, **`optimizer/risk_model_config.json`**

---

### 3.7 News

**`news/entity_dictionary.csv`**, **`news/sentiment_lexicon.csv`**, **`news/source_whitelist.csv`**, **`news/source_blacklist.csv`**, **`news/rules_impact_scoring.json`**
(Dev plan: metadata only; 24h delay; labeled in UI.)

---

### 3.8 Rights & Compliance

**`rights/RIGHTS_REGISTRY.yaml`**

```yaml
FMP:     { export: restricted, require_license: true,  attribution: "Financial data © FMP" }
Polygon: { export: restricted, require_license: true,  attribution: "© Polygon.io" }
FRED:    { export: allow,      require_license: false, attribution: "Source: FRED®" }
NewsAPI: { export: restricted, require_license: true,  attribution: "News metadata via NewsAPI.org" }
```

---

## 4) Seeded Patterns (ready to run)

| Pattern                       | Requires                                         | Outputs (seeded)                      |
| ----------------------------- | ------------------------------------------------ | ------------------------------------- |
| `portfolio_overview`          | packs, prices, fx, lots, ratings, benchmarks     | KPIs, charts, badges, trace           |
| `holding_deep_dive`           | fundamentals (seed/cache), ratings rubrics       | scorecard, components, news impact    |
| `portfolio_macro_overview`    | FRED catalog, transforms, regime defs            | regime card, factor bars, DaR         |
| `macro_cycles_overview`       | cycle defs & snapshots                           | STDC/LTDC/Empire cards + timeline     |
| `portfolio_scenario_analysis` | positions, factor exposures, scenario presets    | ΔP/L table, winners/losers            |
| `macro_trend_monitor`         | trend windows + regime snapshots                 | trend cards, alert presets            |
| `policy_rebalance`            | policy templates + constraints + risk model      | proposed trades + TE/turnover/cost    |
| `news_impact_analysis`        | entity dict, lexicon, source lists, impact rules | impact scores + trace                 |
| `export_portfolio_report`     | rights registry + templates                      | PDF w/ attributions + pack/commit IDs |

---

## 5) Validation & Golden Tests

**Makefile**

* `make validate` runs:

  * **Property**: currency identity (`r_base ≈ (1+r_local)*(1+r_fx)-1`)
  * **Golden**: Beancount vs `portfolio_metrics` ±1 bp (includes ADR test)
  * **Integration**: portfolio_overview, macro_overview, cycles_overview, scenario_analysis, export_report
  * **Rights drills**: blocked/watermarked exports; attributions present
  * **Chaos (staging)**: provider outage/stale panels/DLQ
  * **RLS/IDOR fuzz**: isolation

**Manual smoke** (first run)

* Overview shows KPIs; Explain includes pack/commit; staleness chips visible.
* Macro → STDC “Late”, LTDC “High leverage” seeded; Empire “Decline”.
* Scenario “Rates +50bp” downshifts growth names; winners/losers list plausible.
* Export PDF passes rights on FRED; blocks if only Polygon/FMP without license.

---

## 6) Simulation (what happens day-1)

1. `make seed:foundation seed:demo` loads P1 (CAD base; AAPL/USD + RY/XIU CAD), D0 & D1 packs, WM FX, CA (AAPL split & dividend ADR).
2. `make seed:macro seed:cycles seed:ratings seed:optimizer seed:news` loads all pattern configs.
3. Nightly job runs (or `make run:nightly`): pack build (already D1), reconcile (green), compute, pre-warm, mark fresh, evaluate alerts.
4. UI loads **Overview** → TWR/Attribution/Badges; **Macro** → regime; **Cycles** → STDC/LTDC/Empire; **Scenarios** → ΔP/L; **Alerts** → presets; **Reports** → PDF with rights gate.
5. Golden tests confirm **±1 bp**; currency identity passes; chaos & rights drills pass.

---

## 7) Governance & Versions

* JSON seeds include `schema_version` and `method_version`.
* **ADRs** mandatory for: pack policy, currency rules, cycle definitions/weights/boundaries, rating math changes, rights policy, optimizer constraints.
* Seed changes go through PR + test update + ADR.

---

## 8) Appendix — Seed Loader Stubs

**`scripts/seed_load.py`**

```python
import csv, sys
from psycopg import connect
from upsert import upsert_row  # helper

tbl, path = sys.argv[1], sys.argv[2]
with connect(dsn=os.getenv("DATABASE_URL")) as con, con.cursor() as cur, open(path) as f:
    for row in csv.DictReader(f):
        upsert_row(cur, tbl, row)  # natural keys per table; ON CONFLICT DO UPDATE
con.commit()
```

**`scripts/seed_generate_demo_pack.py`**

```python
# builds pricing_pack rows, FX & prices for D0/D1; computes hash; writes CSVs
```

**`scripts/seed_ingest_demo_portfolio.py`**

```python
# resolves symbol mapping; locks trade FX; computes cost_base; writes lots/transactions
# ensures dividend rows include pay_date FX and withholding
```

---

## 9) Final Checklist (seeding Go/No-Go)

* [ ] All seeds loaded idempotently via `make seed:*`
* [ ] RLS on; migrations complete; hypertables/cont. aggregates present
* [ ] Golden/property/integration/rights/chaos/rls tests all green
* [ ] Nightly pack flips fresh reliably; pre-warm completes; freshness gate enforced
* [ ] DALIO cycles visible; regime + cycles + scenarios coherent
* [ ] Export rights enforced; attributions in PDFs; blocked/watermarked when needed

---

**This document + seeds = instant, reproducible runs on day-1**, with macro regimes, Dalio cycles, Buffett ratings, compliant exports, and a CAD-base demo portfolio that exercises multi-currency, ADR, and restatement logic.
