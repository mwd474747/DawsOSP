{
  "agent_registry": {
    "claude": {
      "description": "Main conversational interface that interprets user intent",
      "capabilities": ["intent_recognition", "natural_language", "orchestration"],
      "primary_method": "interpret",
      "input_format": {
        "user_input": "string"
      },
      "output_format": {
        "intent": "string",
        "entities": "array",
        "action": "string",
        "parameters": "object",
        "friendly_response": "string"
      },
      "triggers": ["general_queries", "complex_questions", "explanations"]
    },
    "data_harvester": {
      "description": "Fetches and aggregates data from various sources",
      "capabilities": ["fetch_market_data", "fetch_economic_data", "data_aggregation"],
      "primary_method": "harvest",
      "input_format": {
        "request": "string"
      },
      "output_format": {
        "data": "object",
        "response": "string"
      },
      "triggers": ["get_data", "fetch", "pull", "retrieve"]
    },
    "pattern_spotter": {
      "description": "Identifies patterns and trends in data",
      "capabilities": ["detect_patterns", "analyze_trends", "find_anomalies"],
      "primary_method": "process",
      "input_format": {
        "analysis_type": "string",
        "data": "object"
      },
      "output_format": {
        "patterns": "array",
        "confidence": "float",
        "response": "string"
      },
      "triggers": ["pattern", "trend", "anomaly", "cycle"]
    },
    "relationship_hunter": {
      "description": "Finds correlations and relationships between entities",
      "capabilities": ["find_correlations", "detect_relationships", "analyze_connections"],
      "primary_method": "process",
      "input_format": {
        "target": "string",
        "data": "object",
        "capabilities": "object"
      },
      "output_format": {
        "correlations": "object",
        "response": "string"
      },
      "triggers": ["correlation", "relationship", "connection", "link"]
    },
    "forecast_dreamer": {
      "description": "Makes predictions and forecasts",
      "capabilities": ["predict_future", "forecast_trends", "scenario_analysis"],
      "primary_method": "think",
      "input_format": {
        "target": "string",
        "horizon": "string",
        "context": "object"
      },
      "output_format": {
        "forecast": "object",
        "confidence": "float",
        "scenarios": "array"
      },
      "triggers": ["forecast", "predict", "future", "will", "outlook"]
    },
    "data_digester": {
      "description": "Processes and structures raw data into knowledge graph",
      "capabilities": ["structure_data", "create_nodes", "digest_information"],
      "primary_method": "think",
      "input_format": {
        "data": "object",
        "type": "string"
      },
      "output_format": {
        "nodes_created": "array",
        "edges_created": "array",
        "response": "string"
      },
      "triggers": ["digest", "structure", "organize", "process_data"]
    },
    "graph_mind": {
      "description": "Manages and queries the knowledge graph",
      "capabilities": ["query_graph", "traverse_paths", "manage_nodes"],
      "primary_method": "think",
      "input_format": {
        "query": "string",
        "operation": "string"
      },
      "output_format": {
        "results": "array",
        "paths": "array",
        "response": "string"
      },
      "triggers": ["graph", "node", "edge", "connection", "knowledge"]
    },
    "code_monkey": {
      "description": "Generates and modifies code",
      "capabilities": ["write_code", "refactor", "debug"],
      "primary_method": "think",
      "input_format": {
        "task": "string",
        "language": "string",
        "context": "object"
      },
      "output_format": {
        "code": "string",
        "explanation": "string",
        "changes": "array"
      },
      "triggers": ["code", "implement", "write", "generate", "function"]
    },
    "structure_bot": {
      "description": "Organizes files and project structure",
      "capabilities": ["organize_files", "create_structure", "manage_directories"],
      "primary_method": "think",
      "input_format": {
        "task": "string",
        "path": "string"
      },
      "output_format": {
        "actions_taken": "array",
        "structure": "object",
        "response": "string"
      },
      "triggers": ["organize", "structure", "files", "directory"]
    },
    "refactor_elf": {
      "description": "Simplifies and improves code",
      "capabilities": ["simplify_code", "improve_performance", "clean_code"],
      "primary_method": "think",
      "input_format": {
        "code": "string",
        "goals": "array"
      },
      "output_format": {
        "refactored_code": "string",
        "improvements": "array",
        "metrics": "object"
      },
      "triggers": ["refactor", "simplify", "improve", "optimize", "clean"]
    },
    "workflow_recorder": {
      "description": "Records and saves workflows",
      "capabilities": ["record_workflow", "save_pattern", "capture_steps"],
      "primary_method": "think",
      "input_format": {
        "workflow": "object",
        "name": "string"
      },
      "output_format": {
        "workflow_id": "string",
        "steps_recorded": "integer",
        "response": "string"
      },
      "triggers": ["record", "save_workflow", "capture"]
    },
    "workflow_player": {
      "description": "Replays recorded workflows",
      "capabilities": ["replay_workflow", "execute_pattern", "run_steps"],
      "primary_method": "think",
      "input_format": {
        "workflow_id": "string",
        "parameters": "object"
      },
      "output_format": {
        "results": "array",
        "status": "string",
        "response": "string"
      },
      "triggers": ["replay", "run_workflow", "execute_workflow"]
    }
  },
  "capability_matrix": {
    "data_operations": {
      "fetch_data": ["data_harvester"],
      "structure_data": ["data_digester"],
      "analyze_data": ["pattern_spotter", "relationship_hunter"],
      "forecast_data": ["forecast_dreamer"]
    },
    "analysis_operations": {
      "pattern_detection": ["pattern_spotter"],
      "correlation_analysis": ["relationship_hunter"],
      "trend_analysis": ["pattern_spotter", "forecast_dreamer"],
      "anomaly_detection": ["pattern_spotter"]
    },
    "knowledge_operations": {
      "query_knowledge": ["graph_mind", "claude"],
      "add_knowledge": ["data_digester", "graph_mind"],
      "connect_knowledge": ["relationship_hunter", "graph_mind"]
    },
    "code_operations": {
      "generate_code": ["code_monkey"],
      "refactor_code": ["refactor_elf"],
      "organize_code": ["structure_bot"]
    },
    "workflow_operations": {
      "record_workflow": ["workflow_recorder"],
      "execute_workflow": ["workflow_player"],
      "orchestrate": ["claude"]
    }
  },
  "agent_collaboration_patterns": {
    "data_pipeline": {
      "description": "Fetch → Structure → Analyze → Respond",
      "agents": ["data_harvester", "data_digester", "pattern_spotter", "claude"],
      "use_cases": ["market_analysis", "economic_assessment"]
    },
    "insight_generation": {
      "description": "Query → Analyze → Find Patterns → Generate Insights",
      "agents": ["claude", "pattern_spotter", "relationship_hunter"],
      "use_cases": ["investment_insights", "market_correlations"]
    },
    "forecast_pipeline": {
      "description": "Historical Data → Pattern Analysis → Forecast",
      "agents": ["data_harvester", "pattern_spotter", "forecast_dreamer"],
      "use_cases": ["price_prediction", "trend_forecasting"]
    },
    "knowledge_building": {
      "description": "Harvest → Digest → Connect → Store",
      "agents": ["data_harvester", "data_digester", "relationship_hunter", "graph_mind"],
      "use_cases": ["knowledge_graph_expansion", "relationship_mapping"]
    }
  },
  "agent_interfaces": {
    "standard_input": {
      "user_input": "The user's query or request",
      "context": "Additional context information",
      "data": "Data to be processed",
      "parameters": "Specific parameters for the operation"
    },
    "standard_output": {
      "response": "Human-readable response",
      "data": "Structured data result",
      "error": "Error message if operation failed",
      "metadata": {
        "agent": "Agent that processed the request",
        "method_used": "Method that was called",
        "timestamp": "When the operation occurred",
        "confidence": "Confidence in the result (0-1)"
      }
    }
  }
}